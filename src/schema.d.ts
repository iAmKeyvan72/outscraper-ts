/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/maps/search-v3": {
    /**
     * Google Places v3 (speed optimized)
     * @description Returns places from Google Maps based on a given search query (or many queries).
     *
     * The results from searches are the same as you would see by visiting a regular [Google Maps](https://www.google.com/maps/search/restaurants,+Manhattan,+New+York,+NY,+USA/) site. However, in most cases, it's important to use locations inside queries (e.g., `bars, NY, USA`) as the IP addresses of Outscraper's servers might be located in different countries.
     *
     * In case no places were found by your search criteria, your search request will consume the usage of one place.
     *
     * This endpoint is optimized for fast responses and can be used as a real-time API. Set the `limit` parameter to `10` to achieve the maximum response speed.
     */
    get: {
      parameters: {
        query: {
          query: components["schemas"]["parameters"]["google_maps_query_v2"];
          limit?: components["schemas"]["parameters"]["maps_limit"];
          dropDuplicates?: components["schemas"]["parameters"]["maps_drop_duplicates"];
          coordinates?: components["schemas"]["parameters"]["coordinates_v2"];
          /** @description Skip first N places, where N should be multiple to 20 (e.g. 0, 20, 40). It's commonly used in pagination. */
          skipPlaces?: number;
          language?: components["schemas"]["parameters"]["language"];
          region?: components["schemas"]["parameters"]["region"];
          enrichment?: components["schemas"]["parameters"]["enrichments"];
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        204: components["schemas"]["responses"]["204"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/maps/search": {
    /**
     * Google Places v1 (deprecated)
     * @description Returns places from Google Maps based on a given search query (or many queries).
     *
     * The results from searches are the same as you would see by visiting a regular [Google Maps](https://www.google.com/maps/search/restaurants,+Manhattan,+New+York,+NY,+USA/) site. However, in most cases, it's recommended to use locations inside queries (e.g., `bars, NY, USA`) as the IP addresses of Outscraper's servers might be located in different countries.
     *
     * In case no places were found by your search criteria, your search request will consume the usage of one place.
     */
    get: {
      parameters: {
        query: {
          query: components["schemas"]["parameters"]["google_maps_query"];
          limit?: components["schemas"]["parameters"]["maps_limit"];
          dropDuplicates?: components["schemas"]["parameters"]["maps_drop_duplicates"];
          coordinates?: components["schemas"]["parameters"]["coordinates"];
          language?: components["schemas"]["parameters"]["language"];
          region?: components["schemas"]["parameters"]["region"];
          enrichment?: components["schemas"]["parameters"]["enrichments"];
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        204: components["schemas"]["responses"]["204"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/google-places-by-domain": {
    /**
     * Google Maps (Places) by Domain
     * @description Allows finding places by domains.
     */
    get: {
      parameters: {
        query: {
          /**
           * @description Domains or websites (e.g., `dominopark.com`, `https://www.esbnyc.com/`).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
          perQuery?: components["schemas"]["parameters"]["items_per_query"];
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        204: components["schemas"]["responses"]["204"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/maps/directory": {
    /**
     * Google Directory Places (beta)
     * @description Returns Google Maps places located in a parent place (mall, food court, etc.)
     */
    get: {
      parameters: {
        query: {
          query: components["schemas"]["parameters"]["google_maps_query"];
          /** @description The parameter specifies the limit of places to get from one parent place (mall, food court, etc.). */
          perQuery?: number;
          coordinates?: components["schemas"]["parameters"]["coordinates"];
          language?: components["schemas"]["parameters"]["language"];
          region?: components["schemas"]["parameters"]["region"];
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /** @description The response contains the `status` of the request and `data`. */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        204: components["schemas"]["responses"]["204"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/maps/reviews-v3": {
    /**
     * Google Maps Reviews v3 (speed optimized)
     * @description Returns Google Maps reviews from places when using search queries (e.g., `restaurants, Manhattan, NY, USA`) or from a single place when using `Google IDs` or names (e.g., `NoMad Restaurant, NY, USA`, `0x886916e8bc273979:0x5141fcb11460b226`). In addition to the reviews, it returns places information.
     *
     * In case no reviews were found by your search criteria, your search request will consume the usage of one review.
     *
     * This endpoint is optimized for fast responses and can be used as a real-time API. Set the reviewsLimit parameter to 10 to achieve the maximum response speed.
     */
    get: {
      parameters: {
        query: {
          query: components["schemas"]["parameters"]["google_maps_query_v2"];
          reviewsLimit?: components["schemas"]["parameters"]["maps_reviews_reviews_limit"];
          reviewsQuery?: components["schemas"]["parameters"]["maps_reviews_query"];
          limit?: components["schemas"]["parameters"]["maps_reviews_limit"];
          sort?: components["schemas"]["parameters"]["maps_reviews_sort"];
          lastPaginationId?: components["schemas"]["parameters"]["last_pagination_id"];
          start?: components["schemas"]["parameters"]["maps_reviews_start"];
          cutoff?: components["schemas"]["parameters"]["maps_reviews_cutoff"];
          cutoffRating?: components["schemas"]["parameters"]["maps_reviews_cutoff_rating"];
          ignoreEmpty?: components["schemas"]["parameters"]["maps_reviews_cutoff_ignore_empty"];
          language?: components["schemas"]["parameters"]["language"];
          region?: components["schemas"]["parameters"]["region"];
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /** @description The response contains the `status` of the request and `data`. Data is an array where each element represents a place with its reviews. */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        204: components["schemas"]["responses"]["204"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/maps/reviews": {
    /**
     * Google Maps Reviews v1 (deprecated)
     * @description Returns Google Maps reviews from places when using search queries (e.g., `restaurants, Manhattan, NY, USA`) or from a single place when using IDs or names (e.g., `NoMad Restaurant, NY, USA`, `0x886916e8bc273979:0x5141fcb11460b226`, `ChIJu7bMNFV-54gR-lrHScvPRX4`). In addition to the reviews, it returns places information.
     *
     * In case no reviews were found by your search criteria, your search request will consume the usage of one review.
     */
    get: {
      parameters: {
        query: {
          query: components["schemas"]["parameters"]["google_maps_query"];
          reviewsLimit?: components["schemas"]["parameters"]["maps_reviews_reviews_limit"];
          reviewsQuery?: components["schemas"]["parameters"]["maps_reviews_query"];
          limit?: components["schemas"]["parameters"]["maps_reviews_limit"];
          sort?: components["schemas"]["parameters"]["maps_reviews_sort"];
          lastPaginationId?: components["schemas"]["parameters"]["last_pagination_id"];
          start?: components["schemas"]["parameters"]["maps_reviews_start"];
          cutoff?: components["schemas"]["parameters"]["maps_reviews_cutoff"];
          cutoffRating?: components["schemas"]["parameters"]["maps_reviews_cutoff_rating"];
          ignoreEmpty?: components["schemas"]["parameters"]["maps_reviews_cutoff_ignore_empty"];
          coordinates?: components["schemas"]["parameters"]["coordinates"];
          language?: components["schemas"]["parameters"]["language"];
          region?: components["schemas"]["parameters"]["region"];
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /** @description The response contains the `status` of the request and `data`. Data is an array where each element represents a place with its reviews. */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        204: components["schemas"]["responses"]["204"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/maps/photos-v3": {
    /**
     * Google Maps Photos
     * @description Returns Google Maps photos from places when using search queries (e.g., `restaurants, Manhattan, NY, USA`) or from a single place when using IDs or names (e.g., `NoMad Restaurant, NY, USA`, `0x886916e8bc273979:0x5141fcb11460b226`, `ChIJu7bMNFV-54gR-lrHScvPRX4`).
     *
     * In case no photos were found by your search criteria, your search request will consume the usage of one photo.
     */
    get: {
      parameters: {
        query: {
          query: components["schemas"]["parameters"]["google_maps_query"];
          /** @description The parameter specifies the limit of photos to get from one place. */
          photosLimit?: number;
          limit?: components["schemas"]["parameters"]["maps_reviews_limit"];
          /** @description Tne parameter specifies one of the filtering types. */
          tag?: "all" | "latest" | "menu" | "by_owner";
          language?: components["schemas"]["parameters"]["language"];
          region?: components["schemas"]["parameters"]["region"];
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /** @description The response contains the `status` of the request and `data`. Data is an array where each element represents a place with its photos. */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        204: components["schemas"]["responses"]["204"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/maps/directions": {
    /**
     * Google Directions
     * @description Returns directions between two points from Google Maps.
     */
    get: {
      parameters: {
        query: {
          /**
           * @description The parameter defines the origin. You can use anything that you would use on Google Maps directions (e.g., `Lincoln Way & 19th Ave, San Francisco, USA`).
           *
           * It supports batching by sending arrays with up to `250` origins. It allows multiple directions to be sent in one request and save on network latency time.
           */
          origin: string[];
          /**
           * @description The parameter defines the destination. You can use anything that you would use on Google Maps directions (e.g., `19th Ave & Taraval St, San Francisco, USA`).
           *
           * It supports batching by sending arrays with up to `250` destinations. It allows multiple directions to be sent in one request and save on network latency time.
           */
          destination: string[];
          /**
           * @description The parameter specifies the departure timestamp.
           *
           * The current timestamp is used when the value is not provided.
           */
          departure_time?: number;
          /**
           * @description The parameter specifies the end departure timestamp.
           *
           * Using this parameter requires using the `interval` parameter.
           */
          finish_time?: number;
          /** @description The parameter specifies the interval to use between departure_time and finish_time. */
          interval?: number;
          language?: components["schemas"]["parameters"]["language"];
          region?: components["schemas"]["parameters"]["region"];
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /** @description The response contains the `status` of the request and `data`. */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/maps/suggestions": {
    /**
     * Place Autocomplete
     * @description Get automatic search suggestions for your queries on Google Maps.
     */
    get: {
      parameters: {
        query: {
          /**
           * @description The parameter defines the query to search for suggestions (e.g., `5th Av`, `Central Pa`).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          origin: string[];
          /** @description The latitude and longitude coordinates specifying the location for search (e.g., `37.427074,-122.1439166`, `40.7449819,-74.0271321`). */
          coordinates: string[];
          language?: components["schemas"]["parameters"]["language"];
          region?: components["schemas"]["parameters"]["region"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/google-play/reviews": {
    /**
     * App/Book/Movie Reviews
     * @description Returns reviews from any app/book/movie in the Google Play store.
     */
    get: {
      parameters: {
        query: {
          /**
           * @description You can use app IDs or direct links (e.g., `https://play.google.com/store/apps/details?id=com.facebook.katana`, `com.facebook.katana`).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
          limit?: components["schemas"]["parameters"]["reviews_limit"];
          /** @description Tne parameter specifies one of the sorting types. */
          sort?: "most_relevant" | "newest" | "rating";
          /** @description The parameter specifies the maximum (oldest) timestamp value for reviews. Using the `cutoff` parameter overwrites `sort` parameter to `newest`. */
          cutoff?: number;
          /** @description Filter by a specific rating. Works only with `sort=rating`. */
          rating?: number;
          language?: components["schemas"]["parameters"]["language"];
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/google-search-v3": {
    /**
     * Google Search
     * @description Returns search results from Google based on a given search query (or many queries). This endpoint is optimized for fast responses and can be used as a real-time API.
     */
    get: {
      parameters: {
        query: {
          query: components["schemas"]["parameters"]["google_search_query"];
          pagesPerQuery?: components["schemas"]["parameters"]["pages_per_query"];
          uule?: components["schemas"]["parameters"]["google_search_uule"];
          language?: components["schemas"]["parameters"]["language"];
          region?: components["schemas"]["parameters"]["region"];
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        204: components["schemas"]["responses"]["204"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/google-search-news": {
    /**
     * Google Search News
     * @description Returns search results from Google News based on a given search query (or many queries).
     */
    get: {
      parameters: {
        query: {
          query: components["schemas"]["parameters"]["google_search_query"];
          pagesPerQuery?: components["schemas"]["parameters"]["pages_per_query"];
          uule?: components["schemas"]["parameters"]["google_search_uule"];
          language?: components["schemas"]["parameters"]["language"];
          region?: components["schemas"]["parameters"]["region"];
          /** @description The parameter specifies the date range of the results (`h` - past hour, `d` - past 24 hours, `w` - past week, `m` - past month, 'y' - past year). */
          tbs?: "h" | "d" | "w" | "m" | "y";
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        204: components["schemas"]["responses"]["204"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/google-search-videos": {
    /**
     * Google Search Videos
     * @description Returns search results from Google Videos based on a given search query (or many queries).
     */
    get: {
      parameters: {
        query: {
          query: components["schemas"]["parameters"]["google_search_query"];
          pagesPerQuery?: components["schemas"]["parameters"]["pages_per_query"];
          uule?: components["schemas"]["parameters"]["google_search_uule"];
          language?: components["schemas"]["parameters"]["language"];
          region?: components["schemas"]["parameters"]["region"];
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        204: components["schemas"]["responses"]["204"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/google-search-images": {
    /**
     * Google Search Images
     * @description Returns images search results from Google based on a given search query (or many queries).
     */
    get: {
      parameters: {
        query: {
          query: components["schemas"]["parameters"]["google_search_query"];
          perQuery?: components["schemas"]["parameters"]["items_per_query"];
          uule?: components["schemas"]["parameters"]["google_search_uule"];
          language?: components["schemas"]["parameters"]["language"];
          region?: components["schemas"]["parameters"]["region"];
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        204: components["schemas"]["responses"]["204"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/google-search-shopping": {
    /**
     * Google Search Shopping
     * @description Returns products search results from Google based on a given search query (or many queries).
     */
    get: {
      parameters: {
        query: {
          query: components["schemas"]["parameters"]["google_search_query"];
          pagesPerQuery?: components["schemas"]["parameters"]["pages_per_query"];
          uule?: components["schemas"]["parameters"]["google_search_uule"];
          language?: components["schemas"]["parameters"]["language"];
          region?: components["schemas"]["parameters"]["region"];
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        204: components["schemas"]["responses"]["204"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/google-search-careers": {
    /**
     * Google Search Careers
     * @description Allows scraping search results from Google Careers.
     */
    get: {
      parameters: {
        query: {
          query: components["schemas"]["parameters"]["google_search_query"];
          pagesPerQuery?: components["schemas"]["parameters"]["pages_per_query"];
          language?: components["schemas"]["parameters"]["language"];
          region?: components["schemas"]["parameters"]["region"];
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: never;
        };
        202: components["schemas"]["responses"]["202"];
        204: components["schemas"]["responses"]["204"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/google-shopping-reviews": {
    /**
     * Google Shopping Reviews
     * @description Returns reviews from Google product based on a given search query (or many queries).
     */
    get: {
      parameters: {
        query: {
          /**
           * @description Product links or product IDs (e.g., `https://www.google.com/shopping/product/7016166685587850095`, `7016166685587850095`).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
          perQuery?: components["schemas"]["parameters"]["items_per_query"];
          uule?: components["schemas"]["parameters"]["google_search_uule"];
          language?: components["schemas"]["parameters"]["language"];
          region?: components["schemas"]["parameters"]["region"];
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        204: components["schemas"]["responses"]["204"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/youtube-search": {
    /**
     * YouTube Search
     * @description Returns search results from YouTube.
     */
    get: {
      parameters: {
        query: {
          /**
           * @description Queries to search on YouTube (e.g., `funny cats videos`).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
          limit?: components["schemas"]["parameters"]["limit"];
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        204: components["schemas"]["responses"]["204"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/youtube-channel": {
    /**
     * YouTube Channel
     * @description Returns data from YouTube channels.
     */
    get: {
      parameters: {
        query: {
          /**
           * @description Domain or link to YouTube channel (e.g., `https://www.youtube.com/@outscraper`, `outscraper`).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        204: components["schemas"]["responses"]["204"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/youtube-comments": {
    /**
     * YouTube Comments
     * @description Returns comments from YouTube videos.
     */
    get: {
      parameters: {
        query: {
          /**
           * @description Video links or video IDs (e.g., `https://www.youtube.com/watch?v=ph5pHgklaZ0`, `ph5pHgklaZ0`).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
          perQuery?: components["schemas"]["parameters"]["items_per_query"];
          language?: components["schemas"]["parameters"]["language"];
          region?: components["schemas"]["parameters"]["region"];
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        204: components["schemas"]["responses"]["204"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/indeed-search": {
    /**
     * Indeed Job Search
     * @description Returns jobs from Indeed.
     */
    get: {
      parameters: {
        query: {
          /**
           * @description Search links with search parameters (e.g., `https://www.indeed.com/jobs?q=&l=Fremont+Canyon%2C+CA`).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
          limit?: components["schemas"]["parameters"]["limit"];
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        204: components["schemas"]["responses"]["204"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/yelp-search": {
    /**
     * Yelp Search
     * @description Returns search results from Yelp.
     */
    get: {
      parameters: {
        query: {
          /**
           * @description Search links with search parameters (e.g., `https://www.yelp.com/search?find_desc=Restaurants&find_loc=San+Francisco%2C+CA`).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
          limit?: components["schemas"]["parameters"]["limit"];
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/yelp-biz": {
    /**
     * Yelp Business
     * @description Return business information from Yelp.
     */
    get: {
      parameters: {
        query: {
          /**
           * @description You can use direct links, and IDs of any Yelp business (e.g., `https://www.yelp.com/biz/cancha-boutique-gastrobar-san-francisco`, `eggcellent-waffles-san-francisco`, `iXoLJWjbcXCO43RT-H0uQQ`).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/yellowpages-search": {
    /**
     * Yellow Pages Search
     * @description Returns search results from Yellow Pages.
     */
    get: {
      parameters: {
        query: {
          /**
           * @description Categories to search for (e.g., `bars`, `restaurants`, `dentists`).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
          /** @description The parameter specifies where to search (e.g., `New York, NY`). */
          location?: string;
          limit?: components["schemas"]["parameters"]["limit"];
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/booking/reviews": {
    /**
     * Booking Reviews
     * @description Returns reviews from Booking.com hotels.
     */
    get: {
      parameters: {
        query: {
          /**
           * @description You can use direct links, and IDs of any booking hotel (e.g., `https://www.booking.com/hotel/tr/old-town-point-amp-spa-antalya.html`, `old-town-point-amp-spa-antalya`).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
          limit?: components["schemas"]["parameters"]["reviews_limit"];
          skip?: components["schemas"]["parameters"]["skip"];
          /** @description The parameter specifies one of the sorting types. */
          sort?: "f_recent_desc" | "f_recent_asc" | "f_score_desc" | "f_score_asc";
          /**
           * @description The parameter specifies the oldest timestamp value for reviews.
           *
           * Using the `cutoff` parameter overwrites `sort` parameter to `f_recent_desc`. Therefore, the latest reviews will be at the beginning.
           */
          cutoff?: number;
          language?: components["schemas"]["parameters"]["language"];
          region?: components["schemas"]["parameters"]["region"];
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/capterra-reviews": {
    /**
     * Capterra Reviews
     * @description Returns reviews from Capterra.
     */
    get: {
      parameters: {
        query: {
          /**
           * @description Links to Capterra product pages (e.g., `https://www.capterra.com/p/228041/Google-Maps-scraper/`).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
          limit?: components["schemas"]["parameters"]["reviews_limit"];
          /** @description The parameter specifies one of the sorting types. */
          sort?: "MOST_HELPFUL" | "MOST_RECENT" | "HIGHEST_RATING" | "LOWEST_RATING";
          /**
           * @description The parameter specifies the oldest timestamp value for reviews.
           *
           * Using the `cutoff` parameter overwrites `sort` parameter to `MOST_RECENT`. Therefore, the latest reviews will be at the beginning.
           */
          cutoff?: number;
          language?: components["schemas"]["parameters"]["language"];
          region?: components["schemas"]["parameters"]["region"];
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/producthunt-reviews": {
    /**
     * Product Hunt Reviews
     * @description Returns reviews from Product Hunt.
     */
    get: {
      parameters: {
        query: {
          /**
           * @description Links to Product Hunt product pages, or page IDs (e.g., `https://www.producthunt.com/products/outscraper`, `outscraper`).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
          limit?: components["schemas"]["parameters"]["reviews_limit"];
          /** @description The parameter specifies one of the sorting types. */
          sort?: "BEST" | "LATEST" | "FAVORABLE" | "CRITICAL";
          /**
           * @description The parameter specifies the oldest timestamp value for reviews.
           *
           * Using the `cutoff` parameter overwrites `sort` parameter to `LATEST`. Therefore, the latest reviews will be at the beginning.
           */
          cutoff?: number;
          language?: components["schemas"]["parameters"]["language"];
          region?: components["schemas"]["parameters"]["region"];
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/yelp/reviews": {
    /**
     * Yelp Reviews
     * @description Returns reviews from Yelp businesses.
     *
     * In case no reviews were found by your search criteria, your search request will consume the usage of one review.
     */
    get: {
      parameters: {
        query: {
          /**
           * @description You can use direct links, and IDs of any Yelp business (e.g., `https://www.yelp.com/biz/cancha-boutique-gastrobar-san-francisco`, `eggcellent-waffles-san-francisco`, `iXoLJWjbcXCO43RT-H0uQQ`).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
          limit?: components["schemas"]["parameters"]["reviews_limit"];
          skip?: components["schemas"]["parameters"]["skip"];
          /** @description The parameter specifies one of the sorting types. */
          sort?: "relevance_desc" | "date_desc" | "date_asc" | "rating_desc" | "rating_asc" | "elites_desc";
          /**
           * @description The parameter specifies the oldest timestamp value for reviews.
           *
           * Using the `cutoff` parameter overwrites `sort` parameter to `date_desc`. Therefore, the latest reviews will be at the beginning.
           */
          cutoff?: number;
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/trustpilot": {
    /**
     * Trustpilot
     * @description Returns data from Trustpilot businesses.
     */
    get: {
      parameters: {
        query: {
          /**
           * @description Links to Trustpilot pages or domain names (e.g., `outscraper.com`, `https://www.trustpilot.com/review/outscraper.com`).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
          enrichment?: components["schemas"]["parameters"]["enrichments"];
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/trustpilot/search": {
    /**
     * Trustpilot Search
     * @description Returns search resutls from Trustpilot.
     */
    get: {
      parameters: {
        query: {
          /**
           * @description Company or category to search on Trustpilot (e.g., `real estate`).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
          limit?: components["schemas"]["parameters"]["limit"];
          enrichment?: components["schemas"]["parameters"]["enrichments"];
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/trustpilot/reviews": {
    /**
     * Trustpilot Reviews
     * @description Returns reviews from Trustpilot businesses.
     *
     * In case no reviews were found by your search criteria, your search request will consume the usage of one review.
     */
    get: {
      parameters: {
        query: {
          /**
           * @description Links to Trustpilot pages or domain names (e.g., `outscraper.com`, `https://www.trustpilot.com/review/outscraper.com`).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
          limit?: components["schemas"]["parameters"]["reviews_limit"];
          /** @description The parameter specifies one of the language filters. */
          languages?: "default" | "all" | "en" | "es" | "de";
          /** @description The parameter specifies one of the sorting types. */
          sort?: "recency";
          /**
           * @description The parameter specifies the oldest timestamp value for reviews.
           *
           * Using the `cutoff` parameter overwrites `sort` parameter to `recency`. Therefore, the latest reviews will be at the beginning.
           */
          cutoff?: number;
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/tripadvisor/reviews": {
    /**
     * Tripadvisor Reviews
     * @description Returns reviews from Tripadvisor businesses.
     *
     * In case no reviews were found by your search criteria, your search request will consume the usage of one review.
     */
    get: {
      parameters: {
        query: {
          /**
           * @description Links to Tripadvisor pages (e.g., `https://www.tripadvisor.com/Restaurant_Review-g187147-d12947099-Reviews-Mayfair_Garden-Paris_Ile_de_France.html`).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
          limit?: components["schemas"]["parameters"]["reviews_limit"];
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/amazon/products": {
    /**
     * Amazon Products
     * @description Returns information about products on Amazon.
     */
    get: {
      parameters: {
        query: {
          /**
           * @description You can use Amazon products or summary pages URLs.
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
          /** @description The parameter specifies the limit of products to get from one query (in case of using summary pages). */
          limit?: number;
          domain?: components["schemas"]["parameters"]["amazon_domain"];
          /** @description The parameter specifies the postal code for delivery. */
          postal_code?: string;
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/amazon/reviews": {
    /**
     * Amazon Reviews
     * @description Returns product's reviews from Amazon.
     */
    get: {
      parameters: {
        query: {
          /**
           * @description You can use URLs or ASINs from Amazon products (e.g., `https://www.amazon.com/dp/1612680194`, `1612680194`, etc.).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
          /** @description The parameter specifies the limit of reviews to get from one query. */
          limit?: number;
          /** @description The parameter specifies one of the sorting types. */
          sort?: "helpful" | "recent";
          /** @description The parameter specifies one of the reviewer filter types (All reviewers / Verified purchase only). */
          filterByReviewer?: "all_reviews" | "avp_only_reviews";
          /** @description The parameter specifies one of the filter types by stars. */
          filterByStar?: "all_stars" | "five_star" | "four_star" | "three_star" | "two_star" | "one_star" | "positive" | "critical";
          domain?: components["schemas"]["parameters"]["amazon_domain"];
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/facebook/pages": {
    /**
     * Facebook Pages
     * @description Returns information from the list of Facebook pages.
     */
    get: {
      parameters: {
        query: {
          /**
           * @description Links to Facebook pages or Page usernames (e.g., `https://www.facebook.com/outscraper`, `outscraper`).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/facebook/reviews": {
    /**
     * Facebook Reviews (BETA)
     * @description Returns reviews from Facebook pages.
     */
    get: {
      parameters: {
        query: {
          /**
           * @description Links to Facebook pages or Page usernames (e.g., `https://www.facebook.com/outscraper`, `outscraper`).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
          /** @description The parameter specifies the limit of reviews to get from one FB page. */
          limit?: number;
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/emails-and-contacts": {
    /**
     * Emails & Contacts
     * @description Allows finding email addresses, social links, and phones from domains.
     */
    get: {
      parameters: {
        query: {
          /**
           * @description Domain or link (e.g., `outscraper.com`).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
          preferredContacts?: components["schemas"]["parameters"]["preferredContacts"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/email-validator": {
    /**
     * Email Address Verifier
     * @description Allows to validate email addresses. Checks if emails are deliverable.
     */
    get: {
      parameters: {
        query: {
          /**
           * @description Email address (e.g., `support@outscraper.com`).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
          async?: components["schemas"]["parameters"]["async"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/disposable-email-checker": {
    /**
     * Disposable Email Checker
     * @description Checks origins of email addresses (disposable, free, or corporate)
     */
    get: {
      parameters: {
        query: {
          /**
           * @description Email address (e.g., `support@outscraper.com`).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: never;
        };
        202: components["schemas"]["responses"]["202"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/contacts-finder": {
    /**
     * Contacts Finder
     * @description Allows finding company contacts from domains.
     */
    get: {
      parameters: {
        query: {
          /**
           * @description Domain or link (e.g., `outscraper.com`).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
          /** @description The parameter specifies the limit of contacts to get. */
          limitPerCompany?: number;
          preferredContacts?: components["schemas"]["parameters"]["preferredContacts"];
          /** @description The parameter allows to return contacts only with title. */
          ignoreWithoutTitle?: boolean;
          /** @description The parameter allows to return contacts only with Linkedin. */
          ignoreWithoutLinkedin?: boolean;
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/phones-enricher": {
    /**
     * Phone Numbers Enricher
     * @description Returns phone carrier data (name/type), validates phones and ensures messages deliverability.
     */
    get: {
      parameters: {
        query: {
          /**
           * @description Phone number (e.g., `+1 281 236 8208`).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/whatasp-checker": {
    /**
     * WhatsApp Checker
     * @description Checks whether a phone is connected to the service.
     */
    get: {
      parameters: {
        query: {
          /**
           * @description Phone number (e.g., `+1 281 236 8208`).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/geocoding": {
    /**
     * Geocoding
     * @description Translates human-readable addresses into locations on the map (latitude, longitude).
     */
    get: {
      parameters: {
        query: {
          /**
           * @description Addresses specifying the location for which you want to get the coordinates (e.g., `321 California Ave, Palo Alto, CA 94306`, `Central Park, NY`).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/reverse-geocoding": {
    /**
     * Reverse Geocoding
     * @description Translate locations on the map into human-readable addresses.
     */
    get: {
      parameters: {
        query: {
          /**
           * @description The latitude and longitude coordinates specifying the location for which you want the closest, human-readable address (e.g., `40.7624284 -73.973794`, `37.427074,-122.1439166`).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/universal-scraper": {
    /**
     * Universal AI-Powered Scraper
     * @description Extracts the data you need from any web page by using AI.
     */
    get: {
      parameters: {
        query: {
          /**
           * @description Links to web pages (e.g., `https://www.apple.com/iphone/`).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
          /** @description The parameter defines attributes to parse from a web page (e.g., `attributes=name,price,discount price,description`). */
          attributes?: string[];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/onlyfans-profiles": {
    /**
     * OnlyFans Profiles
     * @description Returns information from OnlyFans profiles.
     */
    get: {
      parameters: {
        query: {
          /**
           * @description Usernames or profile links (e.g., `https://onlyfans.com/aaroncarter/`, `aaroncarter`).
           *
           * It supports batching by sending arrays with up to `250` queries (e.g., `query=text1&query=text2&query=text3`). It allows multiple queries to be sent in one request and to save on network latency time.
           */
          query: string[];
          fields?: components["schemas"]["parameters"]["fields"];
          async?: components["schemas"]["parameters"]["async"];
          ui?: components["schemas"]["parameters"]["ui"];
          webhook?: components["schemas"]["parameters"]["webhook"];
        };
      };
      responses: {
        /**
         * @description {
         *   "$ref": "components[\"schemas\"][\"results\"][\"description\"][\"common\"]"
         * }
         */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        202: components["schemas"]["responses"]["202"];
        204: components["schemas"]["responses"]["204"];
        401: components["schemas"]["responses"]["401"];
        402: components["schemas"]["responses"]["402"];
        422: components["schemas"]["responses"]["422"];
      };
    };
  };
  "/requests/{requestId}": {
    /**
     * Request Results
     * @description Allows you to fetch responses from requests created with async API endpoints. You can fetch responses before the expiration time by request ID, or use webhooks to get the data once it's ready.
     *
     * Request status can be Pending, Success, or Failure. Each response is available for `2` hours after a request has been completed. Once the response is expired the status will be `Pending` again.
     */
    get: {
      parameters: {
        query?: {
          /** @description The parameter allows you to return flat results. All the results from queries will be combined in one array. */
          flat?: boolean;
          /**
           * @description The parameter allows you to return only the link to the file result (`&convertFileResult=false`) without converting it to a JSON array.
           *
           * Works only for UI tasks where results are stored in files.
           */
          convertFileResult?: boolean;
        };
        path: {
          /** @description Request ID provided by API endpoints at `["id"]`. Example: `32692d16-725c-4e66-b013-95e80e873b7e` */
          requestId: string;
        };
      };
      responses: {
        /** @description The response contains the `status` of the request and `data` in case the request is finished. */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        204: components["schemas"]["responses"]["204"];
      };
    };
    /**
     * Terminate Request
     * @description Allows you to terminate created requests.
     */
    delete: {
      parameters: {
        path: {
          /** @description Request ID provided by API endpoints at `["id"]`. Example: `32692d16-725c-4e66-b013-95e80e873b7e` */
          requestId: string;
        };
      };
      responses: {
        /** @description Request terminated. */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        401: components["schemas"]["responses"]["401"];
      };
    };
  };
  "/requests": {
    /**
     * Requests History
     * @description Fetch up to `100` latest requests during the last `24` hours.
     */
    get: {
      parameters: {
        query?: {
          /** @description The parameter allows you to filter requests by type (running/finished). */
          type?: string;
          skip?: components["schemas"]["parameters"]["skip"];
          /** @description The parameter specifies the number of requests to return. */
          pageSize?: number;
        };
      };
      responses: {
        /** @description Your latest request. */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        401: components["schemas"]["responses"]["401"];
      };
    };
  };
  "/tasks": {
    /**
     * Get Tasks
     * @description Fetch user tasks.
     */
    get: {
      parameters: {
        query?: {
          /** @description The parameter specifies the search query (tag). */
          query?: string;
          /** @description The parameter specifies the last task ID. It's commonly used in pagination. */
          lastId?: string;
          /** @description The parameter specifies the number of items to return. */
          pageSize?: number;
        };
      };
      responses: {
        /** @description User tasks. */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        401: components["schemas"]["responses"]["401"];
      };
    };
    /**
     * Create Task
     * @description Allows you to create UI tasks.
     */
    post: {
      requestBody?: {
        content: {
          "application/json": {
            /** @description ID of the service you want to use (e.g., `google_maps_service_v2`, `google_maps_reviews_service_v3`). */
            service_name?: string;
            /** @description Queries to search for (e.g., `restaurants ny usa`, `bars ny usa`). */
            queries?: string[];
            /**
             * @description The parameter defines an enrichment or enrichments (e.g., `enrichment=enrichment1&enrichment=enrichment2&enrichment=enrichment3`) you want to apply to the results.
             *
             * Available values: `domains_service`, `emails_validator_service`, `disposable_email_checker`, `whatsapp_checker`, `imessage_checker`, `phones_enricher_service`, `trustpilot_service`, `company_insights_service`, etc.
             *
             * Use `&enrichments=domains_service,emails_validator_service` to enrich data with Emails & Contacts Scraper (domains_service), and Email Address Verifier (emails_validator_service).
             *
             * It increases the time of the response.
             */
            enrichments?: string[];
            tags?: string[];
          };
        };
      };
      responses: {
        /** @description Task created. */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        401: components["schemas"]["responses"]["401"];
      };
    };
  };
  "/tasks/{taskId}": {
    /**
     * Get Task
     * @description Fetch user task.
     */
    get: {
      parameters: {
        path: {
          /** @description Task ID. Example: `20211211132758c8e9` */
          taskId: string;
        };
      };
      responses: {
        /** @description User task. */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        401: components["schemas"]["responses"]["401"];
      };
    };
    /**
     * Restart Task
     * @description Allows you to recreate tasks.
     */
    put: {
      parameters: {
        path: {
          /** @description Task ID. Example: `20211211132758c8e9` */
          taskId: string;
        };
      };
      responses: {
        /** @description Task restarted. */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        401: components["schemas"]["responses"]["401"];
      };
    };
    /**
     * Terminate Task
     * @description Allows you to terminate created tasks.
     */
    delete: {
      parameters: {
        path: {
          /** @description Task ID. Example: `20211211132758c8e9` */
          taskId: string;
        };
      };
      responses: {
        /** @description Task removed. */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        401: components["schemas"]["responses"]["401"];
      };
    };
  };
  "/profile/balance": {
    /**
     * Get Balance
     * @description Fetch user balance information.
     */
    get: {
      responses: {
        /** @description Profile Balance. */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        401: components["schemas"]["responses"]["401"];
      };
    };
  };
  "/locations": {
    /**
     * Get Country Locations
     * @description Fetch country locations that you can use to search on Google Maps.
     */
    get: {
      responses: {
        /** @description Country Locations. */
        200: {
          content: {
            "application/json": unknown;
          };
        };
        401: components["schemas"]["responses"]["401"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * @default en
     * @enum {string}
     */
    language: "en" | "de" | "es" | "es-419" | "fr" | "hr" | "it" | "nl" | "pl" | "pt-BR" | "pt-PT" | "vi" | "tr" | "ru" | "ar" | "th" | "ko" | "zh-CN" | "zh-TW" | "ja" | "ach" | "af" | "ak" | "ig" | "az" | "ban" | "ceb" | "xx-bork" | "bs" | "br" | "ca" | "cs" | "sn" | "co" | "cy" | "da" | "yo" | "et" | "xx-elmer" | "eo" | "eu" | "ee" | "tl" | "fil" | "fo" | "fy" | "gaa" | "ga" | "gd" | "gl" | "gn" | "xx-hacker" | "ht" | "ha" | "haw" | "bem" | "rn" | "id" | "ia" | "xh" | "zu" | "is" | "jw" | "rw" | "sw" | "tlh" | "kg" | "mfe" | "kri" | "la" | "lv" | "to" | "lt" | "ln" | "loz" | "lua" | "lg" | "hu" | "mg" | "mt" | "mi" | "ms" | "pcm" | "no" | "nso" | "ny" | "nn" | "uz" | "oc" | "om" | "xx-pirate" | "ro" | "rm" | "qu" | "nyn" | "crs" | "sq" | "sk" | "sl" | "so" | "st" | "sr-ME" | "sr-Latn" | "su" | "fi" | "sv" | "tn" | "tum" | "tk" | "tw" | "wo" | "el" | "be" | "bg" | "ky" | "kk" | "mk" | "mn" | "sr" | "tt" | "tg" | "uk" | "ka" | "hy" | "yi" | "iw" | "ug" | "ur" | "ps" | "sd" | "fa" | "ckb" | "ti" | "am" | "ne" | "mr" | "hi" | "bn" | "pa" | "gu" | "or" | "ta" | "te" | "kn" | "ml" | "si" | "lo" | "my" | "km" | "chr";
    /** @enum {string} */
    region: "AF" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AG" | "AR" | "AM" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BY" | "BE" | "BZ" | "BJ" | "BT" | "BO" | "BA" | "BW" | "BR" | "VG" | "BN" | "BG" | "BF" | "BI" | "KH" | "CM" | "CA" | "CV" | "CF" | "TD" | "CL" | "CN" | "CO" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "EE" | "ET" | "FJ" | "FI" | "FR" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GT" | "GG" | "GY" | "HT" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LY" | "LI" | "LT" | "LU" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MU" | "MX" | "FM" | "MD" | "MN" | "ME" | "MS" | "MA" | "MQ" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NZ" | "NI" | "NE" | "NG" | "NU" | "MK" | "NO" | "OM" | "PK" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RO" | "RU" | "RW" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SK" | "SI" | "SB" | "SO" | "ZA" | "KR" | "ES" | "LK" | "SH" | "VC" | "SR" | "SE" | "CH" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TO" | "TT" | "TN" | "TR" | "TM" | "VI" | "UG" | "UA" | "AE" | "GB" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "ZM" | "ZW";
    parameters: unknown;
    responses: unknown;
    /**
     * @description {
     *   "common": "The response contains the `status` of the request and `data`. Data is an array where each element represents a response for a single query from the request."
     * }
     */
    results: unknown;
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
